#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshorten-64-to-32"
#pragma clang diagnostic ignored "-Wsign-conversion"
#pragma clang diagnostic ignored "-Wmissing-variable-declarations"
#pragma clang diagnostic ignored "-Wglobal-constructors"
#pragma clang diagnostic ignored "-Wunused-macros"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf_package.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protobuf_package.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf_package {

namespace {

const ::google::protobuf::Descriptor* ProtobufInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtobufInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtobufDirectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtobufDirectory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protobuf_5fpackage_2eproto() {
  protobuf_AddDesc_protobuf_5fpackage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protobuf_package.proto");
  GOOGLE_CHECK(file != NULL);
  ProtobufInfo_descriptor_ = file->message_type(0);
  static const int ProtobufInfo_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, image_fullseg_coords_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, image_fullseg_coords_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, image_fullseg_coords_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, image_perimseg_coords_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, image_perimseg_coords_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, image_perimseg_coords_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, image_userseg_coords_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, image_userseg_coords_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, image_userseg_coords_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, quantifiedproperties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, usercellvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, usercellformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, seed_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, seed_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, seed_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, seed_manual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, contour_addremovemerge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, contour_mergegroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, contour_windowsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, contour_tmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, contour_segmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, hand_validated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, seed_hsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, seed_t1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, seed_t2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, seed_segmethod_),
  };
  ProtobufInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtobufInfo_descriptor_,
      ProtobufInfo::default_instance_,
      ProtobufInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtobufInfo));
  ProtobufDirectory_descriptor_ = file->message_type(1);
  static const int ProtobufDirectory_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufDirectory, protobuf_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufDirectory, usercelldescriptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufDirectory, quantifiedpropertynames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufDirectory, idx_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufDirectory, image_dimy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufDirectory, image_dimx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufDirectory, image_dimz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufDirectory, x_micron_calibration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufDirectory, y_micron_calibration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufDirectory, z_micron_calibration_),
  };
  ProtobufDirectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtobufDirectory_descriptor_,
      ProtobufDirectory::default_instance_,
      ProtobufDirectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufDirectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufDirectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtobufDirectory));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protobuf_5fpackage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtobufInfo_descriptor_, &ProtobufInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtobufDirectory_descriptor_, &ProtobufDirectory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protobuf_5fpackage_2eproto() {
  delete ProtobufInfo::default_instance_;
  delete ProtobufInfo_reflection_;
  delete ProtobufDirectory::default_instance_;
  delete ProtobufDirectory_reflection_;
}

void protobuf_AddDesc_protobuf_5fpackage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026protobuf_package.proto\022\020protobuf_packa"
    "ge\"\345\005\n\014ProtobufInfo\022\"\n\026image_fullseg_coo"
    "rds_y\030\001 \003(\005B\002\020\001\022\"\n\026image_fullseg_coords_"
    "x\030\002 \003(\005B\002\020\001\022\"\n\026image_fullseg_coords_z\030\003 "
    "\003(\005B\002\020\001\022#\n\027image_perimseg_coords_y\030\004 \003(\005"
    "B\002\020\001\022#\n\027image_perimseg_coords_x\030\005 \003(\005B\002\020"
    "\001\022#\n\027image_perimseg_coords_z\030\006 \003(\005B\002\020\001\022\""
    "\n\026image_userseg_coords_y\030\007 \003(\005B\002\020\001\022\"\n\026im"
    "age_userseg_coords_x\030\010 \003(\005B\002\020\001\022\"\n\026image_"
    "userseg_coords_z\030\t \003(\005B\002\020\001\022\034\n\024quantified"
    "Properties\030\n \003(\002\022\025\n\ruserCellValue\030\013 \003(\002\022"
    "\027\n\017userCellFormula\030\014 \003(\t\022\013\n\003idx\030\r \001(\002\022\016\n"
    "\006seed_y\030\016 \001(\002\022\016\n\006seed_x\030\017 \001(\002\022\016\n\006seed_z\030"
    "\020 \001(\002\022\023\n\013seed_manual\030\021 \001(\002\022\036\n\026contour_Ad"
    "dRemoveMerge\030\022 \001(\002\022\032\n\022contour_MergeGroup"
    "\030\023 \001(\002\022\032\n\022contour_WindowSize\030\024 \001(\002\022\024\n\014co"
    "ntour_Tmax\030\025 \001(\002\022\031\n\021contour_segmethod\030\026 "
    "\001(\002\022\031\n\016hand_validated\030\027 \001(\002:\0011\022\020\n\010seed_h"
    "sz\030\030 \001(\002\022\017\n\007seed_t1\030\031 \001(\002\022\017\n\007seed_t2\030\032 \001"
    "(\002\022\026\n\016seed_segmethod\030\033 \001(\002\"\263\002\n\021ProtobufD"
    "irectory\0225\n\rprotobuf_info\030\001 \003(\0132\036.protob"
    "uf_package.ProtobufInfo\022\034\n\024userCellDescr"
    "iptions\030\002 \003(\t\022\037\n\027quantifiedPropertyNames"
    "\030\003 \003(\t\022\022\n\007idx_max\030\004 \001(\002:\0010\022\022\n\nimage_dimy"
    "\030\005 \001(\002\022\022\n\nimage_dimx\030\006 \001(\002\022\022\n\nimage_dimz"
    "\030\007 \001(\002\022\034\n\024x_micron_calibration\030\010 \001(\002\022\034\n\024"
    "y_micron_calibration\030\t \001(\002\022\034\n\024z_micron_c"
    "alibration\030\n \001(\002", 1096);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobuf_package.proto", &protobuf_RegisterTypes);
  ProtobufInfo::default_instance_ = new ProtobufInfo();
  ProtobufDirectory::default_instance_ = new ProtobufDirectory();
  ProtobufInfo::default_instance_->InitAsDefaultInstance();
  ProtobufDirectory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protobuf_5fpackage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protobuf_5fpackage_2eproto {
  StaticDescriptorInitializer_protobuf_5fpackage_2eproto() {
    protobuf_AddDesc_protobuf_5fpackage_2eproto();
  }
} static_descriptor_initializer_protobuf_5fpackage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtobufInfo::kImageFullsegCoordsYFieldNumber;
const int ProtobufInfo::kImageFullsegCoordsXFieldNumber;
const int ProtobufInfo::kImageFullsegCoordsZFieldNumber;
const int ProtobufInfo::kImagePerimsegCoordsYFieldNumber;
const int ProtobufInfo::kImagePerimsegCoordsXFieldNumber;
const int ProtobufInfo::kImagePerimsegCoordsZFieldNumber;
const int ProtobufInfo::kImageUsersegCoordsYFieldNumber;
const int ProtobufInfo::kImageUsersegCoordsXFieldNumber;
const int ProtobufInfo::kImageUsersegCoordsZFieldNumber;
const int ProtobufInfo::kQuantifiedPropertiesFieldNumber;
const int ProtobufInfo::kUserCellValueFieldNumber;
const int ProtobufInfo::kUserCellFormulaFieldNumber;
const int ProtobufInfo::kIdxFieldNumber;
const int ProtobufInfo::kSeedYFieldNumber;
const int ProtobufInfo::kSeedXFieldNumber;
const int ProtobufInfo::kSeedZFieldNumber;
const int ProtobufInfo::kSeedManualFieldNumber;
const int ProtobufInfo::kContourAddRemoveMergeFieldNumber;
const int ProtobufInfo::kContourMergeGroupFieldNumber;
const int ProtobufInfo::kContourWindowSizeFieldNumber;
const int ProtobufInfo::kContourTmaxFieldNumber;
const int ProtobufInfo::kContourSegmethodFieldNumber;
const int ProtobufInfo::kHandValidatedFieldNumber;
const int ProtobufInfo::kSeedHszFieldNumber;
const int ProtobufInfo::kSeedT1FieldNumber;
const int ProtobufInfo::kSeedT2FieldNumber;
const int ProtobufInfo::kSeedSegmethodFieldNumber;
#endif  // !_MSC_VER

ProtobufInfo::ProtobufInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtobufInfo::InitAsDefaultInstance() {
}

ProtobufInfo::ProtobufInfo(const ProtobufInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtobufInfo::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  seed_y_ = 0;
  seed_x_ = 0;
  seed_z_ = 0;
  seed_manual_ = 0;
  contour_addremovemerge_ = 0;
  contour_mergegroup_ = 0;
  contour_windowsize_ = 0;
  contour_tmax_ = 0;
  contour_segmethod_ = 0;
  hand_validated_ = 1;
  seed_hsz_ = 0;
  seed_t1_ = 0;
  seed_t2_ = 0;
  seed_segmethod_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtobufInfo::~ProtobufInfo() {
  SharedDtor();
}

void ProtobufInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtobufInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtobufInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtobufInfo_descriptor_;
}

const ProtobufInfo& ProtobufInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fpackage_2eproto();
  return *default_instance_;
}

ProtobufInfo* ProtobufInfo::default_instance_ = NULL;

ProtobufInfo* ProtobufInfo::New() const {
  return new ProtobufInfo;
}

void ProtobufInfo::Clear() {
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    idx_ = 0;
    seed_y_ = 0;
    seed_x_ = 0;
    seed_z_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    seed_manual_ = 0;
    contour_addremovemerge_ = 0;
    contour_mergegroup_ = 0;
    contour_windowsize_ = 0;
    contour_tmax_ = 0;
    contour_segmethod_ = 0;
    hand_validated_ = 1;
    seed_hsz_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    seed_t1_ = 0;
    seed_t2_ = 0;
    seed_segmethod_ = 0;
  }
  image_fullseg_coords_y_.Clear();
  image_fullseg_coords_x_.Clear();
  image_fullseg_coords_z_.Clear();
  image_perimseg_coords_y_.Clear();
  image_perimseg_coords_x_.Clear();
  image_perimseg_coords_z_.Clear();
  image_userseg_coords_y_.Clear();
  image_userseg_coords_x_.Clear();
  image_userseg_coords_z_.Clear();
  quantifiedproperties_.Clear();
  usercellvalue_.Clear();
  usercellformula_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtobufInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 image_fullseg_coords_y = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_image_fullseg_coords_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_image_fullseg_coords_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image_fullseg_coords_x;
        break;
      }

      // repeated int32 image_fullseg_coords_x = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_fullseg_coords_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_image_fullseg_coords_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_image_fullseg_coords_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_image_fullseg_coords_z;
        break;
      }

      // repeated int32 image_fullseg_coords_z = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_fullseg_coords_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_image_fullseg_coords_z())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_image_fullseg_coords_z())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_image_perimseg_coords_y;
        break;
      }

      // repeated int32 image_perimseg_coords_y = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_perimseg_coords_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_image_perimseg_coords_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_image_perimseg_coords_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_image_perimseg_coords_x;
        break;
      }

      // repeated int32 image_perimseg_coords_x = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_perimseg_coords_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_image_perimseg_coords_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_image_perimseg_coords_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_image_perimseg_coords_z;
        break;
      }

      // repeated int32 image_perimseg_coords_z = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_perimseg_coords_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_image_perimseg_coords_z())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_image_perimseg_coords_z())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_image_userseg_coords_y;
        break;
      }

      // repeated int32 image_userseg_coords_y = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_userseg_coords_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_image_userseg_coords_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_image_userseg_coords_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_image_userseg_coords_x;
        break;
      }

      // repeated int32 image_userseg_coords_x = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_userseg_coords_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_image_userseg_coords_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66, input, this->mutable_image_userseg_coords_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_image_userseg_coords_z;
        break;
      }

      // repeated int32 image_userseg_coords_z = 9 [packed = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_userseg_coords_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_image_userseg_coords_z())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74, input, this->mutable_image_userseg_coords_z())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_quantifiedProperties;
        break;
      }

      // repeated float quantifiedProperties = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_quantifiedProperties:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 85, input, this->mutable_quantifiedproperties())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_quantifiedproperties())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_quantifiedProperties;
        if (input->ExpectTag(93)) goto parse_userCellValue;
        break;
      }

      // repeated float userCellValue = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_userCellValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 93, input, this->mutable_usercellvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_usercellvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_userCellValue;
        if (input->ExpectTag(98)) goto parse_userCellFormula;
        break;
      }

      // repeated string userCellFormula = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userCellFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_usercellformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usercellformula(this->usercellformula_size() - 1).data(),
            this->usercellformula(this->usercellformula_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_userCellFormula;
        if (input->ExpectTag(109)) goto parse_idx;
        break;
      }

      // optional float idx = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_seed_y;
        break;
      }

      // optional float seed_y = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_seed_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &seed_y_)));
          set_has_seed_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_seed_x;
        break;
      }

      // optional float seed_x = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_seed_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &seed_x_)));
          set_has_seed_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_seed_z;
        break;
      }

      // optional float seed_z = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_seed_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &seed_z_)));
          set_has_seed_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_seed_manual;
        break;
      }

      // optional float seed_manual = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_seed_manual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &seed_manual_)));
          set_has_seed_manual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_contour_AddRemoveMerge;
        break;
      }

      // optional float contour_AddRemoveMerge = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_contour_AddRemoveMerge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contour_addremovemerge_)));
          set_has_contour_addremovemerge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_contour_MergeGroup;
        break;
      }

      // optional float contour_MergeGroup = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_contour_MergeGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contour_mergegroup_)));
          set_has_contour_mergegroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_contour_WindowSize;
        break;
      }

      // optional float contour_WindowSize = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_contour_WindowSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contour_windowsize_)));
          set_has_contour_windowsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_contour_Tmax;
        break;
      }

      // optional float contour_Tmax = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_contour_Tmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contour_tmax_)));
          set_has_contour_tmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_contour_segmethod;
        break;
      }

      // optional float contour_segmethod = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_contour_segmethod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contour_segmethod_)));
          set_has_contour_segmethod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_hand_validated;
        break;
      }

      // optional float hand_validated = 23 [default = 1];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hand_validated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hand_validated_)));
          set_has_hand_validated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_seed_hsz;
        break;
      }

      // optional float seed_hsz = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_seed_hsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &seed_hsz_)));
          set_has_seed_hsz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_seed_t1;
        break;
      }

      // optional float seed_t1 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_seed_t1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &seed_t1_)));
          set_has_seed_t1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_seed_t2;
        break;
      }

      // optional float seed_t2 = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_seed_t2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &seed_t2_)));
          set_has_seed_t2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_seed_segmethod;
        break;
      }

      // optional float seed_segmethod = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_seed_segmethod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &seed_segmethod_)));
          set_has_seed_segmethod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtobufInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 image_fullseg_coords_y = 1 [packed = true];
  if (this->image_fullseg_coords_y_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_image_fullseg_coords_y_cached_byte_size_);
  }
  for (int i = 0; i < this->image_fullseg_coords_y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->image_fullseg_coords_y(i), output);
  }

  // repeated int32 image_fullseg_coords_x = 2 [packed = true];
  if (this->image_fullseg_coords_x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_image_fullseg_coords_x_cached_byte_size_);
  }
  for (int i = 0; i < this->image_fullseg_coords_x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->image_fullseg_coords_x(i), output);
  }

  // repeated int32 image_fullseg_coords_z = 3 [packed = true];
  if (this->image_fullseg_coords_z_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_image_fullseg_coords_z_cached_byte_size_);
  }
  for (int i = 0; i < this->image_fullseg_coords_z_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->image_fullseg_coords_z(i), output);
  }

  // repeated int32 image_perimseg_coords_y = 4 [packed = true];
  if (this->image_perimseg_coords_y_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_image_perimseg_coords_y_cached_byte_size_);
  }
  for (int i = 0; i < this->image_perimseg_coords_y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->image_perimseg_coords_y(i), output);
  }

  // repeated int32 image_perimseg_coords_x = 5 [packed = true];
  if (this->image_perimseg_coords_x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_image_perimseg_coords_x_cached_byte_size_);
  }
  for (int i = 0; i < this->image_perimseg_coords_x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->image_perimseg_coords_x(i), output);
  }

  // repeated int32 image_perimseg_coords_z = 6 [packed = true];
  if (this->image_perimseg_coords_z_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_image_perimseg_coords_z_cached_byte_size_);
  }
  for (int i = 0; i < this->image_perimseg_coords_z_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->image_perimseg_coords_z(i), output);
  }

  // repeated int32 image_userseg_coords_y = 7 [packed = true];
  if (this->image_userseg_coords_y_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_image_userseg_coords_y_cached_byte_size_);
  }
  for (int i = 0; i < this->image_userseg_coords_y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->image_userseg_coords_y(i), output);
  }

  // repeated int32 image_userseg_coords_x = 8 [packed = true];
  if (this->image_userseg_coords_x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_image_userseg_coords_x_cached_byte_size_);
  }
  for (int i = 0; i < this->image_userseg_coords_x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->image_userseg_coords_x(i), output);
  }

  // repeated int32 image_userseg_coords_z = 9 [packed = true];
  if (this->image_userseg_coords_z_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_image_userseg_coords_z_cached_byte_size_);
  }
  for (int i = 0; i < this->image_userseg_coords_z_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->image_userseg_coords_z(i), output);
  }

  // repeated float quantifiedProperties = 10;
  for (int i = 0; i < this->quantifiedproperties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      10, this->quantifiedproperties(i), output);
  }

  // repeated float userCellValue = 11;
  for (int i = 0; i < this->usercellvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      11, this->usercellvalue(i), output);
  }

  // repeated string userCellFormula = 12;
  for (int i = 0; i < this->usercellformula_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->usercellformula(i).data(), this->usercellformula(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->usercellformula(i), output);
  }

  // optional float idx = 13;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->idx(), output);
  }

  // optional float seed_y = 14;
  if (has_seed_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->seed_y(), output);
  }

  // optional float seed_x = 15;
  if (has_seed_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->seed_x(), output);
  }

  // optional float seed_z = 16;
  if (has_seed_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->seed_z(), output);
  }

  // optional float seed_manual = 17;
  if (has_seed_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->seed_manual(), output);
  }

  // optional float contour_AddRemoveMerge = 18;
  if (has_contour_addremovemerge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->contour_addremovemerge(), output);
  }

  // optional float contour_MergeGroup = 19;
  if (has_contour_mergegroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->contour_mergegroup(), output);
  }

  // optional float contour_WindowSize = 20;
  if (has_contour_windowsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->contour_windowsize(), output);
  }

  // optional float contour_Tmax = 21;
  if (has_contour_tmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->contour_tmax(), output);
  }

  // optional float contour_segmethod = 22;
  if (has_contour_segmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->contour_segmethod(), output);
  }

  // optional float hand_validated = 23 [default = 1];
  if (has_hand_validated()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->hand_validated(), output);
  }

  // optional float seed_hsz = 24;
  if (has_seed_hsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->seed_hsz(), output);
  }

  // optional float seed_t1 = 25;
  if (has_seed_t1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->seed_t1(), output);
  }

  // optional float seed_t2 = 26;
  if (has_seed_t2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->seed_t2(), output);
  }

  // optional float seed_segmethod = 27;
  if (has_seed_segmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->seed_segmethod(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtobufInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 image_fullseg_coords_y = 1 [packed = true];
  if (this->image_fullseg_coords_y_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _image_fullseg_coords_y_cached_byte_size_, target);
  }
  for (int i = 0; i < this->image_fullseg_coords_y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->image_fullseg_coords_y(i), target);
  }

  // repeated int32 image_fullseg_coords_x = 2 [packed = true];
  if (this->image_fullseg_coords_x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _image_fullseg_coords_x_cached_byte_size_, target);
  }
  for (int i = 0; i < this->image_fullseg_coords_x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->image_fullseg_coords_x(i), target);
  }

  // repeated int32 image_fullseg_coords_z = 3 [packed = true];
  if (this->image_fullseg_coords_z_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _image_fullseg_coords_z_cached_byte_size_, target);
  }
  for (int i = 0; i < this->image_fullseg_coords_z_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->image_fullseg_coords_z(i), target);
  }

  // repeated int32 image_perimseg_coords_y = 4 [packed = true];
  if (this->image_perimseg_coords_y_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _image_perimseg_coords_y_cached_byte_size_, target);
  }
  for (int i = 0; i < this->image_perimseg_coords_y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->image_perimseg_coords_y(i), target);
  }

  // repeated int32 image_perimseg_coords_x = 5 [packed = true];
  if (this->image_perimseg_coords_x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _image_perimseg_coords_x_cached_byte_size_, target);
  }
  for (int i = 0; i < this->image_perimseg_coords_x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->image_perimseg_coords_x(i), target);
  }

  // repeated int32 image_perimseg_coords_z = 6 [packed = true];
  if (this->image_perimseg_coords_z_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _image_perimseg_coords_z_cached_byte_size_, target);
  }
  for (int i = 0; i < this->image_perimseg_coords_z_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->image_perimseg_coords_z(i), target);
  }

  // repeated int32 image_userseg_coords_y = 7 [packed = true];
  if (this->image_userseg_coords_y_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _image_userseg_coords_y_cached_byte_size_, target);
  }
  for (int i = 0; i < this->image_userseg_coords_y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->image_userseg_coords_y(i), target);
  }

  // repeated int32 image_userseg_coords_x = 8 [packed = true];
  if (this->image_userseg_coords_x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _image_userseg_coords_x_cached_byte_size_, target);
  }
  for (int i = 0; i < this->image_userseg_coords_x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->image_userseg_coords_x(i), target);
  }

  // repeated int32 image_userseg_coords_z = 9 [packed = true];
  if (this->image_userseg_coords_z_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _image_userseg_coords_z_cached_byte_size_, target);
  }
  for (int i = 0; i < this->image_userseg_coords_z_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->image_userseg_coords_z(i), target);
  }

  // repeated float quantifiedProperties = 10;
  for (int i = 0; i < this->quantifiedproperties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(10, this->quantifiedproperties(i), target);
  }

  // repeated float userCellValue = 11;
  for (int i = 0; i < this->usercellvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(11, this->usercellvalue(i), target);
  }

  // repeated string userCellFormula = 12;
  for (int i = 0; i < this->usercellformula_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usercellformula(i).data(), this->usercellformula(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->usercellformula(i), target);
  }

  // optional float idx = 13;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->idx(), target);
  }

  // optional float seed_y = 14;
  if (has_seed_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->seed_y(), target);
  }

  // optional float seed_x = 15;
  if (has_seed_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->seed_x(), target);
  }

  // optional float seed_z = 16;
  if (has_seed_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->seed_z(), target);
  }

  // optional float seed_manual = 17;
  if (has_seed_manual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->seed_manual(), target);
  }

  // optional float contour_AddRemoveMerge = 18;
  if (has_contour_addremovemerge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->contour_addremovemerge(), target);
  }

  // optional float contour_MergeGroup = 19;
  if (has_contour_mergegroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->contour_mergegroup(), target);
  }

  // optional float contour_WindowSize = 20;
  if (has_contour_windowsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->contour_windowsize(), target);
  }

  // optional float contour_Tmax = 21;
  if (has_contour_tmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->contour_tmax(), target);
  }

  // optional float contour_segmethod = 22;
  if (has_contour_segmethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->contour_segmethod(), target);
  }

  // optional float hand_validated = 23 [default = 1];
  if (has_hand_validated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->hand_validated(), target);
  }

  // optional float seed_hsz = 24;
  if (has_seed_hsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->seed_hsz(), target);
  }

  // optional float seed_t1 = 25;
  if (has_seed_t1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->seed_t1(), target);
  }

  // optional float seed_t2 = 26;
  if (has_seed_t2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->seed_t2(), target);
  }

  // optional float seed_segmethod = 27;
  if (has_seed_segmethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->seed_segmethod(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtobufInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional float idx = 13;
    if (has_idx()) {
      total_size += 1 + 4;
    }

    // optional float seed_y = 14;
    if (has_seed_y()) {
      total_size += 1 + 4;
    }

    // optional float seed_x = 15;
    if (has_seed_x()) {
      total_size += 1 + 4;
    }

    // optional float seed_z = 16;
    if (has_seed_z()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float seed_manual = 17;
    if (has_seed_manual()) {
      total_size += 2 + 4;
    }

    // optional float contour_AddRemoveMerge = 18;
    if (has_contour_addremovemerge()) {
      total_size += 2 + 4;
    }

    // optional float contour_MergeGroup = 19;
    if (has_contour_mergegroup()) {
      total_size += 2 + 4;
    }

    // optional float contour_WindowSize = 20;
    if (has_contour_windowsize()) {
      total_size += 2 + 4;
    }

    // optional float contour_Tmax = 21;
    if (has_contour_tmax()) {
      total_size += 2 + 4;
    }

    // optional float contour_segmethod = 22;
    if (has_contour_segmethod()) {
      total_size += 2 + 4;
    }

    // optional float hand_validated = 23 [default = 1];
    if (has_hand_validated()) {
      total_size += 2 + 4;
    }

    // optional float seed_hsz = 24;
    if (has_seed_hsz()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float seed_t1 = 25;
    if (has_seed_t1()) {
      total_size += 2 + 4;
    }

    // optional float seed_t2 = 26;
    if (has_seed_t2()) {
      total_size += 2 + 4;
    }

    // optional float seed_segmethod = 27;
    if (has_seed_segmethod()) {
      total_size += 2 + 4;
    }

  }
  // repeated int32 image_fullseg_coords_y = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->image_fullseg_coords_y_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->image_fullseg_coords_y(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _image_fullseg_coords_y_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 image_fullseg_coords_x = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->image_fullseg_coords_x_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->image_fullseg_coords_x(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _image_fullseg_coords_x_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 image_fullseg_coords_z = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->image_fullseg_coords_z_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->image_fullseg_coords_z(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _image_fullseg_coords_z_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 image_perimseg_coords_y = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->image_perimseg_coords_y_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->image_perimseg_coords_y(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _image_perimseg_coords_y_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 image_perimseg_coords_x = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->image_perimseg_coords_x_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->image_perimseg_coords_x(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _image_perimseg_coords_x_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 image_perimseg_coords_z = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->image_perimseg_coords_z_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->image_perimseg_coords_z(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _image_perimseg_coords_z_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 image_userseg_coords_y = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->image_userseg_coords_y_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->image_userseg_coords_y(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _image_userseg_coords_y_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 image_userseg_coords_x = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->image_userseg_coords_x_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->image_userseg_coords_x(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _image_userseg_coords_x_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 image_userseg_coords_z = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->image_userseg_coords_z_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->image_userseg_coords_z(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _image_userseg_coords_z_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float quantifiedProperties = 10;
  {
    int data_size = 0;
    data_size = 4 * this->quantifiedproperties_size();
    total_size += 1 * this->quantifiedproperties_size() + data_size;
  }

  // repeated float userCellValue = 11;
  {
    int data_size = 0;
    data_size = 4 * this->usercellvalue_size();
    total_size += 1 * this->usercellvalue_size() + data_size;
  }

  // repeated string userCellFormula = 12;
  total_size += 1 * this->usercellformula_size();
  for (int i = 0; i < this->usercellformula_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->usercellformula(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtobufInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtobufInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtobufInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtobufInfo::MergeFrom(const ProtobufInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  image_fullseg_coords_y_.MergeFrom(from.image_fullseg_coords_y_);
  image_fullseg_coords_x_.MergeFrom(from.image_fullseg_coords_x_);
  image_fullseg_coords_z_.MergeFrom(from.image_fullseg_coords_z_);
  image_perimseg_coords_y_.MergeFrom(from.image_perimseg_coords_y_);
  image_perimseg_coords_x_.MergeFrom(from.image_perimseg_coords_x_);
  image_perimseg_coords_z_.MergeFrom(from.image_perimseg_coords_z_);
  image_userseg_coords_y_.MergeFrom(from.image_userseg_coords_y_);
  image_userseg_coords_x_.MergeFrom(from.image_userseg_coords_x_);
  image_userseg_coords_z_.MergeFrom(from.image_userseg_coords_z_);
  quantifiedproperties_.MergeFrom(from.quantifiedproperties_);
  usercellvalue_.MergeFrom(from.usercellvalue_);
  usercellformula_.MergeFrom(from.usercellformula_);
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_seed_y()) {
      set_seed_y(from.seed_y());
    }
    if (from.has_seed_x()) {
      set_seed_x(from.seed_x());
    }
    if (from.has_seed_z()) {
      set_seed_z(from.seed_z());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_seed_manual()) {
      set_seed_manual(from.seed_manual());
    }
    if (from.has_contour_addremovemerge()) {
      set_contour_addremovemerge(from.contour_addremovemerge());
    }
    if (from.has_contour_mergegroup()) {
      set_contour_mergegroup(from.contour_mergegroup());
    }
    if (from.has_contour_windowsize()) {
      set_contour_windowsize(from.contour_windowsize());
    }
    if (from.has_contour_tmax()) {
      set_contour_tmax(from.contour_tmax());
    }
    if (from.has_contour_segmethod()) {
      set_contour_segmethod(from.contour_segmethod());
    }
    if (from.has_hand_validated()) {
      set_hand_validated(from.hand_validated());
    }
    if (from.has_seed_hsz()) {
      set_seed_hsz(from.seed_hsz());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_seed_t1()) {
      set_seed_t1(from.seed_t1());
    }
    if (from.has_seed_t2()) {
      set_seed_t2(from.seed_t2());
    }
    if (from.has_seed_segmethod()) {
      set_seed_segmethod(from.seed_segmethod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtobufInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtobufInfo::CopyFrom(const ProtobufInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufInfo::IsInitialized() const {

  return true;
}

void ProtobufInfo::Swap(ProtobufInfo* other) {
  if (other != this) {
    image_fullseg_coords_y_.Swap(&other->image_fullseg_coords_y_);
    image_fullseg_coords_x_.Swap(&other->image_fullseg_coords_x_);
    image_fullseg_coords_z_.Swap(&other->image_fullseg_coords_z_);
    image_perimseg_coords_y_.Swap(&other->image_perimseg_coords_y_);
    image_perimseg_coords_x_.Swap(&other->image_perimseg_coords_x_);
    image_perimseg_coords_z_.Swap(&other->image_perimseg_coords_z_);
    image_userseg_coords_y_.Swap(&other->image_userseg_coords_y_);
    image_userseg_coords_x_.Swap(&other->image_userseg_coords_x_);
    image_userseg_coords_z_.Swap(&other->image_userseg_coords_z_);
    quantifiedproperties_.Swap(&other->quantifiedproperties_);
    usercellvalue_.Swap(&other->usercellvalue_);
    usercellformula_.Swap(&other->usercellformula_);
    std::swap(idx_, other->idx_);
    std::swap(seed_y_, other->seed_y_);
    std::swap(seed_x_, other->seed_x_);
    std::swap(seed_z_, other->seed_z_);
    std::swap(seed_manual_, other->seed_manual_);
    std::swap(contour_addremovemerge_, other->contour_addremovemerge_);
    std::swap(contour_mergegroup_, other->contour_mergegroup_);
    std::swap(contour_windowsize_, other->contour_windowsize_);
    std::swap(contour_tmax_, other->contour_tmax_);
    std::swap(contour_segmethod_, other->contour_segmethod_);
    std::swap(hand_validated_, other->hand_validated_);
    std::swap(seed_hsz_, other->seed_hsz_);
    std::swap(seed_t1_, other->seed_t1_);
    std::swap(seed_t2_, other->seed_t2_);
    std::swap(seed_segmethod_, other->seed_segmethod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtobufInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtobufInfo_descriptor_;
  metadata.reflection = ProtobufInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtobufDirectory::kProtobufInfoFieldNumber;
const int ProtobufDirectory::kUserCellDescriptionsFieldNumber;
const int ProtobufDirectory::kQuantifiedPropertyNamesFieldNumber;
const int ProtobufDirectory::kIdxMaxFieldNumber;
const int ProtobufDirectory::kImageDimyFieldNumber;
const int ProtobufDirectory::kImageDimxFieldNumber;
const int ProtobufDirectory::kImageDimzFieldNumber;
const int ProtobufDirectory::kXMicronCalibrationFieldNumber;
const int ProtobufDirectory::kYMicronCalibrationFieldNumber;
const int ProtobufDirectory::kZMicronCalibrationFieldNumber;
#endif  // !_MSC_VER

ProtobufDirectory::ProtobufDirectory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtobufDirectory::InitAsDefaultInstance() {
}

ProtobufDirectory::ProtobufDirectory(const ProtobufDirectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtobufDirectory::SharedCtor() {
  _cached_size_ = 0;
  idx_max_ = 0;
  image_dimy_ = 0;
  image_dimx_ = 0;
  image_dimz_ = 0;
  x_micron_calibration_ = 0;
  y_micron_calibration_ = 0;
  z_micron_calibration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtobufDirectory::~ProtobufDirectory() {
  SharedDtor();
}

void ProtobufDirectory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtobufDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtobufDirectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtobufDirectory_descriptor_;
}

const ProtobufDirectory& ProtobufDirectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fpackage_2eproto();
  return *default_instance_;
}

ProtobufDirectory* ProtobufDirectory::default_instance_ = NULL;

ProtobufDirectory* ProtobufDirectory::New() const {
  return new ProtobufDirectory;
}

void ProtobufDirectory::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    idx_max_ = 0;
    image_dimy_ = 0;
    image_dimx_ = 0;
    image_dimz_ = 0;
    x_micron_calibration_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    y_micron_calibration_ = 0;
    z_micron_calibration_ = 0;
  }
  protobuf_info_.Clear();
  usercelldescriptions_.Clear();
  quantifiedpropertynames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtobufDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf_package.ProtobufInfo protobuf_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protobuf_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_protobuf_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_protobuf_info;
        if (input->ExpectTag(18)) goto parse_userCellDescriptions;
        break;
      }

      // repeated string userCellDescriptions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userCellDescriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_usercelldescriptions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usercelldescriptions(this->usercelldescriptions_size() - 1).data(),
            this->usercelldescriptions(this->usercelldescriptions_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userCellDescriptions;
        if (input->ExpectTag(26)) goto parse_quantifiedPropertyNames;
        break;
      }

      // repeated string quantifiedPropertyNames = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quantifiedPropertyNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_quantifiedpropertynames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quantifiedpropertynames(this->quantifiedpropertynames_size() - 1).data(),
            this->quantifiedpropertynames(this->quantifiedpropertynames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_quantifiedPropertyNames;
        if (input->ExpectTag(37)) goto parse_idx_max;
        break;
      }

      // optional float idx_max = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_idx_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &idx_max_)));
          set_has_idx_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_image_dimy;
        break;
      }

      // optional float image_dimy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_image_dimy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &image_dimy_)));
          set_has_image_dimy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_image_dimx;
        break;
      }

      // optional float image_dimx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_image_dimx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &image_dimx_)));
          set_has_image_dimx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_image_dimz;
        break;
      }

      // optional float image_dimz = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_image_dimz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &image_dimz_)));
          set_has_image_dimz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_x_micron_calibration;
        break;
      }

      // optional float x_micron_calibration = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x_micron_calibration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_micron_calibration_)));
          set_has_x_micron_calibration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_y_micron_calibration;
        break;
      }

      // optional float y_micron_calibration = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y_micron_calibration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_micron_calibration_)));
          set_has_y_micron_calibration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_z_micron_calibration;
        break;
      }

      // optional float z_micron_calibration = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z_micron_calibration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_micron_calibration_)));
          set_has_z_micron_calibration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtobufDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf_package.ProtobufInfo protobuf_info = 1;
  for (int i = 0; i < this->protobuf_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->protobuf_info(i), output);
  }

  // repeated string userCellDescriptions = 2;
  for (int i = 0; i < this->usercelldescriptions_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->usercelldescriptions(i).data(), this->usercelldescriptions(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->usercelldescriptions(i), output);
  }

  // repeated string quantifiedPropertyNames = 3;
  for (int i = 0; i < this->quantifiedpropertynames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->quantifiedpropertynames(i).data(), this->quantifiedpropertynames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->quantifiedpropertynames(i), output);
  }

  // optional float idx_max = 4 [default = 0];
  if (has_idx_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->idx_max(), output);
  }

  // optional float image_dimy = 5;
  if (has_image_dimy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->image_dimy(), output);
  }

  // optional float image_dimx = 6;
  if (has_image_dimx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->image_dimx(), output);
  }

  // optional float image_dimz = 7;
  if (has_image_dimz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->image_dimz(), output);
  }

  // optional float x_micron_calibration = 8;
  if (has_x_micron_calibration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->x_micron_calibration(), output);
  }

  // optional float y_micron_calibration = 9;
  if (has_y_micron_calibration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->y_micron_calibration(), output);
  }

  // optional float z_micron_calibration = 10;
  if (has_z_micron_calibration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->z_micron_calibration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtobufDirectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf_package.ProtobufInfo protobuf_info = 1;
  for (int i = 0; i < this->protobuf_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->protobuf_info(i), target);
  }

  // repeated string userCellDescriptions = 2;
  for (int i = 0; i < this->usercelldescriptions_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usercelldescriptions(i).data(), this->usercelldescriptions(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->usercelldescriptions(i), target);
  }

  // repeated string quantifiedPropertyNames = 3;
  for (int i = 0; i < this->quantifiedpropertynames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quantifiedpropertynames(i).data(), this->quantifiedpropertynames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->quantifiedpropertynames(i), target);
  }

  // optional float idx_max = 4 [default = 0];
  if (has_idx_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->idx_max(), target);
  }

  // optional float image_dimy = 5;
  if (has_image_dimy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->image_dimy(), target);
  }

  // optional float image_dimx = 6;
  if (has_image_dimx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->image_dimx(), target);
  }

  // optional float image_dimz = 7;
  if (has_image_dimz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->image_dimz(), target);
  }

  // optional float x_micron_calibration = 8;
  if (has_x_micron_calibration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->x_micron_calibration(), target);
  }

  // optional float y_micron_calibration = 9;
  if (has_y_micron_calibration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->y_micron_calibration(), target);
  }

  // optional float z_micron_calibration = 10;
  if (has_z_micron_calibration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->z_micron_calibration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtobufDirectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional float idx_max = 4 [default = 0];
    if (has_idx_max()) {
      total_size += 1 + 4;
    }

    // optional float image_dimy = 5;
    if (has_image_dimy()) {
      total_size += 1 + 4;
    }

    // optional float image_dimx = 6;
    if (has_image_dimx()) {
      total_size += 1 + 4;
    }

    // optional float image_dimz = 7;
    if (has_image_dimz()) {
      total_size += 1 + 4;
    }

    // optional float x_micron_calibration = 8;
    if (has_x_micron_calibration()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float y_micron_calibration = 9;
    if (has_y_micron_calibration()) {
      total_size += 1 + 4;
    }

    // optional float z_micron_calibration = 10;
    if (has_z_micron_calibration()) {
      total_size += 1 + 4;
    }

  }
  // repeated .protobuf_package.ProtobufInfo protobuf_info = 1;
  total_size += 1 * this->protobuf_info_size();
  for (int i = 0; i < this->protobuf_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->protobuf_info(i));
  }

  // repeated string userCellDescriptions = 2;
  total_size += 1 * this->usercelldescriptions_size();
  for (int i = 0; i < this->usercelldescriptions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->usercelldescriptions(i));
  }

  // repeated string quantifiedPropertyNames = 3;
  total_size += 1 * this->quantifiedpropertynames_size();
  for (int i = 0; i < this->quantifiedpropertynames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->quantifiedpropertynames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtobufDirectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtobufDirectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtobufDirectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtobufDirectory::MergeFrom(const ProtobufDirectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  protobuf_info_.MergeFrom(from.protobuf_info_);
  usercelldescriptions_.MergeFrom(from.usercelldescriptions_);
  quantifiedpropertynames_.MergeFrom(from.quantifiedpropertynames_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_idx_max()) {
      set_idx_max(from.idx_max());
    }
    if (from.has_image_dimy()) {
      set_image_dimy(from.image_dimy());
    }
    if (from.has_image_dimx()) {
      set_image_dimx(from.image_dimx());
    }
    if (from.has_image_dimz()) {
      set_image_dimz(from.image_dimz());
    }
    if (from.has_x_micron_calibration()) {
      set_x_micron_calibration(from.x_micron_calibration());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_y_micron_calibration()) {
      set_y_micron_calibration(from.y_micron_calibration());
    }
    if (from.has_z_micron_calibration()) {
      set_z_micron_calibration(from.z_micron_calibration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtobufDirectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtobufDirectory::CopyFrom(const ProtobufDirectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufDirectory::IsInitialized() const {

  return true;
}

void ProtobufDirectory::Swap(ProtobufDirectory* other) {
  if (other != this) {
    protobuf_info_.Swap(&other->protobuf_info_);
    usercelldescriptions_.Swap(&other->usercelldescriptions_);
    quantifiedpropertynames_.Swap(&other->quantifiedpropertynames_);
    std::swap(idx_max_, other->idx_max_);
    std::swap(image_dimy_, other->image_dimy_);
    std::swap(image_dimx_, other->image_dimx_);
    std::swap(image_dimz_, other->image_dimz_);
    std::swap(x_micron_calibration_, other->x_micron_calibration_);
    std::swap(y_micron_calibration_, other->y_micron_calibration_);
    std::swap(z_micron_calibration_, other->z_micron_calibration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtobufDirectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtobufDirectory_descriptor_;
  metadata.reflection = ProtobufDirectory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_package

// @@protoc_insertion_point(global_scope)
#pragma clang diagnostic pop
